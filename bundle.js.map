{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./game/button.js","webpack:///./game/canvas.js","webpack:///./game/game.js","webpack:///./game/menu.js","webpack:///./game/shapes.js","webpack:///./game/shapes_logic.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACtCA;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,uBAAuB;AACvB,qBAAqB;AACrB,0BAA0B;AAC1B;AACA,4BAA4B;AAC5B,4BAA4B;AAC5B;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,QAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,YAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;;AAEA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,YAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA,2BAA2B,kBAAkB;AAC7C,+BAA+B,qCAAqC;AACpE;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,gBAAgB;AAC9C,kCAAkC,gBAAgB;AAClD;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uBAAuB;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,sCAAsC,YAAY;;AAElD;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,YAAY;AAC9C;AACA,oDAAoD,OAAO,kBAAkB,OAAO;AACpF;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC;AACtC;AACA;;AAEA;AACA;AACA,+BAA+B,uBAAuB;AACtD;AACA;AACA;AACA;AACA;AACA,mCAAmC,YAAY;AAC/C;AACA,qDAAqD,OAAO,kBAAkB,OAAO;AACrF;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC;AACnC;AACA;;AAEA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB,SAAS;;AAEhC;AACA;AACA;;AAEA,2BAA2B,YAAY;AACvC;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,OAAO;AAC9B,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA,YAAY;AACZ,E;;;;;;;;;;;;ACjVA;AAAA;AAAA;AAAgC;AACF;;AAE9B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,mBAAmB,6CAAU;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,+CAAM;AACjC;AACA;AACA,4BAA4B,+CAAM;AAClC;AACA;AACA,+BAA+B,+CAAM;AACrC;AACA;AACA,6BAA6B,+CAAM;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,O;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACD;AACU;;AAE5C;;AAEe;;AAEf;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mCAAmC,uBAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,+CAAW;;AAEvC;;AAEA,+BAA+B,qDAAc;AAC7C;AACA,oBAAoB,8CAAM;AAC1B;;AAEA,+BAA+B,qDAAc;AAC7C;AACA,oBAAoB,8CAAM;AAC1B,oBAAoB,8CAAM;AAC1B,oBAAoB,8CAAM;AAC1B,oBAAoB,8CAAM;AAC1B;;AAEA,+BAA+B,qDAAc;AAC7C;AACA,oBAAoB,8CAAM;AAC1B,oBAAoB,8CAAM;AAC1B,oBAAoB,8CAAM;AAC1B,oBAAoB,8CAAM;AAC1B;;AAEA,+BAA+B,qDAAc;AAC7C;AACA,oBAAoB,8CAAM;AAC1B,oBAAoB,8CAAM;AAC1B,oBAAoB,8CAAM;AAC1B;;AAEA,+BAA+B,qDAAc;AAC7C;AACA,oBAAoB,8CAAM;AAC1B,oBAAoB,8CAAM;AAC1B,oBAAoB,8CAAM;AAC1B,oBAAoB,8CAAM;AAC1B;;AAEA,+BAA+B,qDAAc;AAC7C;AACA,oBAAoB,8CAAM;AAC1B,oBAAoB,8CAAM;AAC1B;;AAEA,+BAA+B,qDAAc;AAC7C;AACA,oBAAoB,8CAAM;AAC1B;;AAEA,+BAA+B,qDAAc;AAC7C;AACA,oBAAoB,8CAAM;AAC1B;;AAEA,+BAA+B,qDAAc;AAC7C;AACA,oBAAoB,8CAAM;AAC1B;;AAEA,+BAA+B,qDAAc;AAC7C;AACA,oBAAoB,8CAAM;AAC1B,oBAAoB,8CAAM;AAC1B,oBAAoB,8CAAM;AAC1B,oBAAoB,8CAAM;AAC1B;AACA,mEAAmE;AACnE,mEAAmE;AACnE,mEAAmE;AACnE,mEAAmE;AACnE,iEAAiE;AACjE,mEAAmE;AACnE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA,YAAY;AACZ,E;;;;;;;;;;;;AC1QA;AAAA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,sBAAsB;AAC5C,0BAA0B,yBAAyB;;AAEnD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;;;;;AClGA;AAAA;AAAA;AACA;AACA;AACA;;AAEe,oCAAoC;AACnD;AACA;AACA;;AAEA;;AAEA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA,gFAAgF,WAAW;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,mBAAmB,cAAc;AACjC,uBAAuB,cAAc;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA+B,YAAY;;AAE3C,kEAAkE;AAClE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2EAA2E;AAC3E;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yEAAyE;AACzE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qJAAqJ;AACrJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uEAAuE;AACvE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,6EAA6E;AAC7E;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,YAAY,O;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,qBAAqB;AACxC,uBAAuB,iBAAiB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./game/game.js\");\n","export default class Button {\n    constructor(width, height, xPos, yPos, baseColor, clickedColor, text) {\n        this.width = width;\n        this.height = height;\n\n        this.xPos = xPos;\n        this.yPos = yPos;\n\n        this.baseColor = baseColor;\n        this.clickedColor = clickedColor;\n        this.color = this.baseColor;\n\n        this.text = text;\n        this.clicked = false;\n        this.active = false;\n    }\n\n    drawButton(context, canvasWidth) {\n        context.lineWidth = 15;\n        context.strokeRect(this.xPos, this.yPos, this.width, this.height);\n        context.fillStyle = this.color;\n        context.fillRect(this.xPos, this.yPos, this.width, this.height);\n        // context.font = \"40px Arial\";\n        context.font = Math.trunc(canvasWidth * 0.021) + \"px Arial\";\n        context.textAlign = \"center\";\n        context.textBaseline = \"middle\";\n        context.fillStyle = \"black\";\n        context.fillText(this.text, this.xPos + (this.width/2), this.yPos + (this.height/2));\n    }\n\n    contains(mouseX, mouseY) {\n        if ((mouseX >= this.xPos) && (mouseX <= (this.xPos + this.width)) && (mouseY >= this.yPos) && (mouseY <= (this.yPos + this.height))) {\n                return true;\n        }\n        else {\n            return false;\n        }\n    }\n}","export default function CanvasState(canvas) {\n    this.canvas = canvas;\n    this.width = canvas.width;\n    this.height = canvas.height;\n    this.context = canvas.getContext(\"2d\");\n    this.context.lineWidth = 2;\n    this.grid = [\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false],\n        [false, false, false, false, false]\n    ];\n\n    // debugger;\n\n    // Keeping track of state\n\n    this.valid = false; // When set to false, the canvas will redraw everything\n    this.shapes = []; // The collection of shapes to be drawn\n    this.dragging = false; // Keeps track of whether or not there is dragging\n    this.selection = null;\n    this.dragoffXArray = []; // 0;\n    this.dragoffYArray = []; // 0;\n    this.mouseActive = false;\n\n    //\n    this.inside = false;\n    this.colliding = false;\n\n    // Events\n\n    let that = this;\n\n    // fixes issue when double clicking causes text to get selected on the canvas\n    canvas.addEventListener(\"selectstart\", function (e) {\n        e.preventDefault();\n        return false;\n    }, false);\n\n    canvas.addEventListener(\"mousedown\", function (e) {\n\n        let mouse = that.getMouse(e);\n        let mouseX = mouse.x;\n        let mouseY = mouse.y;\n        // let shapes = that.shapes;\n        let len = that.shapes.length;\n\n        for (let i = len - 1; i >= 0; i--) {\n            if (that.shapes[i].contains(mouseX, mouseY)) {\n                let pickedShape = that.shapes.splice(i, 1);\n                that.shapes = that.shapes.concat(pickedShape);\n                that.mouseActive = true;\n                let selectedShape = that.shapes[that.shapes.length - 1];\n                let length = selectedShape.cellArray.length;\n\n                for (let j = 0; j < length; j++) {\n                    // Keep track of where we clicked in the object so we can move it smoothly\n                    that.dragoffXArray.push(mouseX - selectedShape.cellArray[j].xPos);\n                    that.dragoffYArray.push(mouseY - selectedShape.cellArray[j].yPos);\n                    that.dragging = true;\n                    that.selection = selectedShape;\n                    that.valid = false;\n                }\n                // debugger;\n                // console.log(\"clicking over here\");\n                return;\n            }\n        }\n\n        if (that.selection) {\n            that.selection = null;\n            that.valid = false;\n        }\n    }, true);\n    \n    canvas.addEventListener(\"mousemove\", function (e) {\n\n        if (that.dragging) {\n            let mouse = that.getMouse(e);\n            let length = that.selection.cellArray.length;\n\n            for (let i = 0; i < length; i++) {\n                // Have the other cells move based on the current locus cell's grid position and triangulate their positions from there\n                that.selection.cellArray[i].xPos = mouse.x - that.dragoffXArray[i];\n                that.selection.cellArray[i].yPos = mouse.y - that.dragoffYArray[i];\n                //******//\n                // debugger;\n                // if (that.selection.cellArray[i].cover[0] !== null && that.selection.cellArray[i].cover[1] !== null) {\n                //     that.grid[that.selection.cellArray[i].cover[0]][that.selection.cellArray[i].cover[1]] = false;\n                // }\n                //******//\n                that.valid = false; // Something is dragging so we must redraw\n            }\n        }\n    }, true);\n\n    document.addEventListener(\"mouseup\", (e) => {\n        that.dragging = false;\n        that.dragoffXArray = [];\n        that.dragoffYArray = [];\n        that.mouseActive = false;\n        // that.selection = null;\n\n        // if (that.selection) {\n        //     let length = that.selection.cellArray.length;\n        //     for (let i = 0; i < length; i++) {\n        //         that.selection.cellArray[i].xPos = that.selection.cellArray[i].originX;\n        //         that.selection.cellArray[i].yPos = that.selection.cellArray[i].originY;\n        //         that.selection.cellArray[i].clicked = false;\n        //     }\n        // }\n        that.valid = false;\n        // debugger;\n    }, true);\n\n    document.addEventListener(\"keydown\", (e) => {\n        if (e.keyCode === 81) {\n\n            let shapesLength = that.shapes.length;\n            // let gridLength = that.grid.length;\n\n            for (let i = 0; i < shapesLength; i++) {\n                for (let j = 0; j < that.shapes[i].cellArray.length; j++) {\n                    // debugger;\n                    that.shapes[i].cellArray[j].xPos = that.shapes[i].cellArray[j].originX;\n                    that.shapes[i].cellArray[j].yPos = that.shapes[i].cellArray[j].originY;\n                }\n            }\n\n            // for (let i = 0; i < gridLength; i++) {\n            //     for (let j = 0; j < gridLength; j++) {\n            //         that.grid[i][j] = false;\n            //     }\n            // }\n\n            that.valid = false;\n        }\n    }, true);\n\n    canvas.addEventListener(\"mouseup\", (e) => {\n\n        that.dragging = false;\n        // Empty out arrays for future use\n        that.dragoffXArray = [];\n        that.dragoffYArray = [];\n        that.mouseActive = false;\n        that.inside = false;\n        // debugger;\n\n        // Add logic for shapes to snap onto grid\n        // use the mouseX and mouseY and see if it is overlapping within the grid\n        // debugger;\n        if (that.selection) {\n            // debugger;\n            // let totalShapesLength = this.shapes.length;\n            // for (let i = 0; i < totalShapesLength; i++) {\n            //     if (that.selection.locus !== this.shapes[i].locus) {\n            //         that.colliding = that.selection.overlappingOtherShapes(this.shapes[i], 108);\n            //     }\n            // }\n\n            let mouse = that.getMouse(e);\n            let mouseX = mouse.x;\n            let mouseY = mouse.y;\n            let length = that.selection.cellArray.length;\n            let temp = Math.trunc(this.width * 0.05625);\n\n            for (let i = 0; i < length; i++) {\n                // if (that.selection.cellArray[i].xPos > 740 && that.selection.cellArray[i].yPos > 0 &&\n                //     that.selection.cellArray[i].xPos < 1280 && that.selection.cellArray[i].yPos < 540) {\n                // if (that.selection.cellArray[i].xPos > ((this.width / 2) + this.width / 8) && that.selection.cellArray[i].yPos > (this.height / 5) &&\n                //     that.selection.cellArray[i].xPos < (((this.width / 2) + this.width / 8) + (108 * 5)) && that.selection.cellArray[i].yPos < (this.height / 5) + (108 * 5)) {\n                //         that.inside = true;\n                //         console.log(\"inside\");\n                // }\n\n                if (that.selection.cellArray.every((element) => {\n                    return element.xPos > ((this.width / 2) - this.width / 10) && \n                        element.xPos < (((this.width / 2) - this.width / 10) + (temp * 5)) && \n                        element.yPos > (this.height / 11) &&\n                        element.yPos < (this.height / 11) + (temp * 5);\n                })) {\n                    that.inside = true;\n                    console.log(\"inside\");\n                }\n\n                // else {\n                //     for (let j = 0; j < length; j++) {\n\n                //         that.selection.cellArray[j].xPos = that.selection.cellArray[j].originX;\n                //         that.selection.cellArray[j].yPos = that.selection.cellArray[j].originY;\n\n                //         // if (that.selection.cellArray[j].cover[0] !== null && that.selection.cellArray[j].cover[1] !== null) {\n                //         //     that.grid[that.selection.cellArray[j].cover[1]][that.selection.cellArray[j].cover[0]] = false;\n                //         // }\n                //     }\n\n                //     that.inside = false; \n                //     break;\n                // }\n            }\n            // // debugger;\n            // if (that.inside && !that.colliding) {\n            //     // debugger;\n            //     for (let i = 0; i < length; i++) {\n            //         // add in logic to make sure all of the shapes are within the square for it to snap\n            //         // console.log(`mouse x is ${mouseX} and mouse y is ${mouseY}`);\n            //         that.selection.overlapping(mouseX, mouseY, 740, 0, 540, 540, 108, that.grid);\n            //         that.selection.cellArray[i].clicked = false;\n            //     }\n            //     // console.log(that.grid);\n            //     // console.log(that.selection);\n\n            //     that.selection.locus = null;\n            //     that.valid = false; // Something is dragging so we must redraw\n            //     that.inside = false;\n            // }\n\n            if (that.inside) {\n                let totalShapesLength = this.shapes.length;\n                for (let i = 0; i < totalShapesLength; i++) {\n                    if (that.selection.locus !== this.shapes[i].locus) {\n                        that.colliding = that.selection.overlappingOtherShapes(this.shapes[i], temp);\n                    }\n                }\n                if (!that.colliding) {\n                    for (let i = 0; i < length; i++) {\n                        // add in logic to make sure all of the shapes are within the square for it to snap\n                        // console.log(`mouse x is ${mouseX} and mouse y is ${mouseY}`);\n                        // that.selection.overlapping(mouseX, mouseY, 740, 0, 540, 540, 108, that.grid);\n                        // that.selection.cellArray[i].clicked = false;\n                        \n                        // that.selection.overlapping(mouseX, mouseY, ((this.width / 2) - this.width / 10), (this.height / 11), 540, 540, temp, that.grid);\n                        that.selection.overlapping(mouseX, mouseY, ((this.width / 2) - this.width / 10), (this.height / 11), Math.trunc(this.width * 0.28125), Math.trunc(this.width * 0.28125), temp, that.grid);\n                        that.selection.cellArray[i].clicked = false;\n                    }\n                }\n\n                that.selection.locus = null;\n                that.valid = false; // Something is dragging so we must redraw\n                that.inside = false;\n            }\n\n            for (let i = 0; i < length; i++) {\n                that.selection.cellArray[i].clicked = false;\n            }\n        }\n    }, true);\n\n    this.selectionColor = \"black\";\n    // this.selectionWidth = 2;\n    this.interval = 15;\n    setInterval(function () {\n        that.draw();\n    }, that.interval);\n}\n\nCanvasState.prototype.addShape = function (shape) {\n    this.shapes.push(shape);\n    this.valid = false;\n};\n\nCanvasState.prototype.clear = function () {\n    this.context.clearRect(0, 0, this.width, this.height);\n};\n\n// While draw is called as often as the interval variable demands, it only ever does something if the canvas gets invalidated by our code\nCanvasState.prototype.draw = function () {\n    // debugger;\n    // If our state is invalid, redraw and validate!\n    if (!this.valid) {\n        let context = this.context;\n        let shapes = this.shapes;\n        this.clear();\n        \n        // Draw all shapes\n        let len = shapes.length;\n        let temp = Math.trunc(this.width * 0.05625);\n\n        for (let i = 0; i < len; i++) {\n\n            let shape = shapes[i];\n            // let length = shape.colorArray.length;\n            let length = shape.length;\n\n            for (let j = 0; j < length; j++) {\n                if (shape[j].xPos > this.width || shape[j].yPos > this.height ||\n                    shape[j].xPos + shape[j].cellSize < 0 || shape[j].yPos + shape[j].cellSize < 0) continue;\n            }\n\n            shapes[i].draw(context);\n        }\n\n        for (let i = 0; i < 5; i++) {\n            for (let j = 0; j < 5; j++) {\n                // context.rect(740 + (108 * i), 0 + (108 * j), 108, 108);\n                // context.rect(((this.width/2) - this.width/10) + (108 * i), this.height/11 + (108 * j), 108, 108);\n                context.rect(((this.width / 2) - this.width / 10) + (temp * i), this.height / 11 + (temp * j), temp, temp);\n            }\n        }\n\n        context.stroke();\n\n        if ((this.selection != null) && this.mouseActive) {\n            context.strokeStyle = this.selectionColor;\n            let selectedShape = this.selection;\n            let length = selectedShape.cellArray.length;\n            for (let i = 0; i < length; i++) {\n                context.strokeRect(selectedShape.cellArray[i].xPos, selectedShape.cellArray[i].yPos, \n                    selectedShape.cellArray[i].cellSize, selectedShape.cellArray[i].cellSize);\n            }\n        }\n\n        this.valid = true;\n    }\n};\n\nCanvasState.prototype.getMouse = function (e) {\n\n    let element = this.canvas;\n    let offsetX = 0;\n    let offsetY = 0;\n    let mouseX, mouseY;\n\n    if (element.offsetParent !== undefined) {\n        do {\n            offsetX += element.offsetLeft;\n            offsetY += element.offsetTop;\n        } while ((element = element.offSetParent));\n    }\n\n    mouseX = e.pageX - offsetX;\n    mouseY = e.pageY - offsetY;\n\n    // Returning a simple javascript object with x and y defined\n    return { x: mouseX, y: mouseY };\n};","import CanvasMenu from \"./menu\";\nimport Button from \"./button\";\n\nfunction init() {\n\n    const canvasField = document.getElementById(\"canvas-field\");\n    const documentField = document.getElementsByClassName(\"body\")[0];\n    // const documentFieldWidth = documentField.clientWidth;\n    // const documentFieldHeight = documentField.clientHeight;\n\n    const documentFieldWidth = documentField.offsetWidth;\n    const documentFieldHeight = documentField.offsetHeight;\n\n    canvasField.setAttribute(\"width\", documentFieldWidth);\n    canvasField.setAttribute(\"height\", documentFieldHeight);\n\n    let menu = new CanvasMenu(canvasField);\n\n    // width, height, xPos, yPos, baseColor, clickedColor, text\n    // const playButton = new Button(324, 108, (documentFieldWidth / 2) - 324 / 2, \n    //                             (documentFieldHeight / 2) - 108 * 2, \n    //                             \"#4285F4\", \"#0F9D58\", \"Play Game\");\n    // const rulesButton = new Button(324, 108, (documentFieldWidth / 2) - 324 / 2, \n    //                             (documentFieldHeight / 2), \n    //                             \"#4285F4\", \"#0F9D58\", \"How To Play\");\n    // const controlsButton = new Button(324, 108, (documentFieldWidth / 2) - 324 / 2, \n    //                             (documentFieldHeight / 2) + 108 * 2, \n    //                             \"#4285F4\", \"#0F9D58\", \"Controls\");\n    // const returnButton = new Button(432, 108, (documentFieldWidth / 2) - 432 / 2, \n    //                             (documentFieldHeight / 2) + 108 * 2, \n    //                             \"#4285F4\", \"#0F9D58\", \"Back To Main Menu\");\n\n    const playButton = new Button(documentFieldWidth * 0.16875, documentFieldHeight * 0.11, (documentFieldWidth / 2) - documentFieldWidth / 12,\n        (documentFieldHeight / 2) - documentFieldHeight * 0.22,\n        \"#4285F4\", \"#0F9D58\", \"Play Game\");\n    const rulesButton = new Button(documentFieldWidth * 0.16875, documentFieldHeight * 0.11, (documentFieldWidth / 2) - documentFieldWidth / 12,\n        (documentFieldHeight / 2),\n        \"#4285F4\", \"#0F9D58\", \"How To Play\");\n    const controlsButton = new Button(documentFieldWidth * 0.16875, documentFieldHeight * 0.11, (documentFieldWidth / 2) - documentFieldWidth / 12,\n        (documentFieldHeight / 2) + documentFieldHeight * 0.22,\n        \"#4285F4\", \"#0F9D58\", \"Controls\");\n    const returnButton = new Button(documentFieldWidth * 0.225, documentFieldHeight * 0.11, (documentFieldWidth / 2) - documentFieldWidth / 9,\n        (documentFieldHeight / 2) + documentFieldHeight * 0.22,\n        \"#4285F4\", \"#0F9D58\", \"Back To Main Menu\");\n\n    menu.addButton(playButton);\n    menu.addButton(rulesButton);\n    menu.addButton(returnButton);\n    menu.addButton(controlsButton);\n}\n\ninit();","import CanvasState from \"./canvas\";\nimport { Square } from \"./shapes\";\nimport ShapeContainer from \"./shapes_logic\";\n\nlet menuLoop = true;\n\nexport default function CanvasMenu(canvas) {\n\n    this.canvas = canvas;\n    this.width = canvas.width;\n    this.height = canvas.height;\n    this.context = canvas.getContext(\"2d\");\n    this.buttons = {};\n    this.clickedButton = null;\n\n    this.playGame = false;\n\n    let that = this;\n\n    canvas.addEventListener(\"selectstart\", function (event) {\n        event.preventDefault();\n        return false;\n    }, false);\n\n    canvas.addEventListener(\"mousedown\", function (event) {\n        let mouse = that.getMouse(event);\n        const buttonKeys = Object.keys(that.buttons);\n\n        for (let i = 0; i < buttonKeys.length; i++) {\n            if (that.buttons[buttonKeys[i]].contains(mouse.x, mouse.y) && that.buttons[buttonKeys[i]].active) {\n                that.buttons[buttonKeys[i]].color = that.buttons[buttonKeys[i]].clickedColor;\n                that.clickedButton = that.buttons[buttonKeys[i]];\n            }\n        }\n    }, true);\n\n    canvas.addEventListener(\"mouseup\", function (event) {\n        let mouse = that.getMouse(event);\n        const buttonKeys = Object.keys(that.buttons);\n        for (let i = 0; i < buttonKeys.length; i++) {\n            if (that.buttons[buttonKeys[i]].contains(mouse.x, mouse.y) && that.buttons[buttonKeys[i]].active) {\n                that.clickedButton.clicked = true;\n            }\n        }\n    }, true);\n\n    this.interval = 30;\n    setInterval(function () {\n        that.drawMenu();\n    }, that.interval);\n}\n\nCanvasMenu.prototype.drawMenu = function () {\n    if (menuLoop) {\n        const buttonKeys = Object.keys(this.buttons);\n        let howToPlay = false;\n        let controls = false;\n        let backToMainMenu = false;\n        let temp = Math.trunc(this.width * 0.05625);\n        this.clear();\n\n        for (let i = 0; i < buttonKeys.length; i++) {\n            if (this.buttons[buttonKeys[i]].clicked) {\n                if (this.buttons[buttonKeys[i]].text === \"Play Game\") {\n                    this.playGame = true;\n                }\n\n                else if (this.buttons[buttonKeys[i]].text === \"How To Play\") {\n                    howToPlay = true;\n                }\n\n                else if (this.buttons[buttonKeys[i]].text === \"Controls\") {\n                    controls = true;\n                }\n\n                else if (this.buttons[buttonKeys[i]].text === \"Back To Main Menu\") {\n                    for (let i = 0; i < buttonKeys.length; i++) {\n                        this.buttons[buttonKeys[i]].clicked = false;\n                        this.buttons[buttonKeys[i]].color = this.buttons[buttonKeys[i]].baseColor;\n                    }\n                    this.clickedButton = null;\n                    this.playGame = false;\n                    howToPlay = false;\n                    controls = false;\n                    backToMainMenu = false;\n                }\n            }\n        }\n        if (!this.playGame && !howToPlay && !controls) {\n            this.context.font = \"bold \" + Math.trunc(this.width * 0.03125) + \"px Arial\";\n            this.context.fillStyle = \"black\";\n            // this.context.fillText(\"Schimata\", this.width/2, this.height/7, 300);\n            this.context.fillText(\"Schimata\", (this.width / 2), this.buttons[\"Play Game\"].yPos - 100, 300);\n            \n            for (let i = 0; i < buttonKeys.length; i++) {\n                if ((this.buttons[buttonKeys[i]].text === \"Play Game\") || \n                (this.buttons[buttonKeys[i]].text === \"How To Play\") || \n                (this.buttons[buttonKeys[i]].text === \"Controls\")) {\n                    this.buttons[buttonKeys[i]].drawButton(this.context, this.width);\n                    this.buttons[buttonKeys[i]].active = true;\n                }\n                else {\n                    this.buttons[buttonKeys[i]].active = false;\n                }\n            }\n        }\n\n        else if (this.playGame && !howToPlay && !backToMainMenu && !controls) {\n            for (let i = 0; i < buttonKeys.length; i++) {\n                this.buttons[buttonKeys[i]].active = false;\n            }\n            this.playGame = false;\n            menuLoop = false;\n\n            // Start game\n            const newCanvasField = document.getElementById(\"canvas-field\");\n            let state = new CanvasState(newCanvasField);\n\n            // cell is 108 by 108\n\n            state.addShape(new ShapeContainer([\n                // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n                new Square(0, 0, 0, 0, temp, \"#3cba54\", \"pink\", false, \"(0, 0) is being clicked\")\n            ]));\n\n            state.addShape(new ShapeContainer([\n                // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n                new Square(0, 0, 0, temp + Math.trunc(this.width * 0.015625), temp, \"#db3236\", \"pink\", false, \"(0,0) is being clicked\"),\n                new Square(1, 0, temp, temp + Math.trunc(this.width * 0.015625), temp, \"#db3236\", \"pink\", false, \"(1,0) is being clicked\"),\n                new Square(0, 1, 0, (temp * 2) + Math.trunc(this.width * 0.015625), temp, \"#db3236\", \"pink\", false, \"(0,1) is being clicked\"),\n                new Square(1, 1, temp, (temp * 2) + Math.trunc(this.width * 0.015625), temp, \"#db3236\", \"pink\", false, \"(1,1) is being clicked\")\n            ]));\n\n            state.addShape(new ShapeContainer([\n                // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n                new Square(0, 0, 0, (temp * 3) + Math.trunc(this.width * 0.03125), temp, \"#4885ed\", \"pink\", false, \"(0,0) is being clicked\"),\n                new Square(0, 1, 0, (temp * 4) + Math.trunc(this.width * 0.03125), temp, \"#4885ed\", \"pink\", false, \"(0,1) is being clicked\"),\n                new Square(1, 1, temp, (temp * 4) + Math.trunc(this.width * 0.03125), temp, \"#4885ed\", \"pink\", false, \"(1,1) is being clicked\"),\n                new Square(0, 2, 0, (temp * 5) + Math.trunc(this.width * 0.03125), temp, \"#4885ed\", \"pink\", false, \"(0,2) is being clicked\")\n            ]));\n\n            state.addShape(new ShapeContainer([\n                // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n                new Square(0, 0, (temp * 2) + Math.trunc(this.width * 0.015625), 0, temp, \"#f4c20d\", \"pink\", false, \"(0,0) is being clicked\"),\n                new Square(0, 1, (temp * 2) + Math.trunc(this.width * 0.015625), temp, temp, \"#f4c20d\", \"pink\", false, \"(0,1) is being clicked\"),\n                new Square(1, 1, (temp * 3) + Math.trunc(this.width * 0.015625), temp, temp, \"#f4c20d\", \"pink\", false, \"(1,1) is being clicked\"),\n            ]));\n\n            state.addShape(new ShapeContainer([\n                // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n                new Square(0, 0, (temp * 2) + Math.trunc(this.width * 0.015625), (temp * 2) + Math.trunc(this.width * 0.015625), temp, \"#551A8B\", \"pink\", false, \"(0,0) is being clicked\"),\n                new Square(0, 1, (temp * 2) + Math.trunc(this.width * 0.015625), (temp * 3) + Math.trunc(this.width * 0.015625), temp, \"#551A8B\", \"pink\", false, \"(0,1) is being clicked\"),\n                new Square(0, 2, (temp * 2) + Math.trunc(this.width * 0.015625), (temp * 4) + Math.trunc(this.width * 0.015625), temp, \"#551A8B\", \"pink\", false, \"(0,2) is being clicked\"),\n                new Square(1, 2, (temp * 3) + Math.trunc(this.width * 0.015625), (temp * 4) + Math.trunc(this.width * 0.015625), temp, \"#551A8B\", \"pink\", false, \"(1,2) is being clicked\")\n            ]));\n\n            state.addShape(new ShapeContainer([\n                // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n                new Square(0, 0, (temp * 2) + Math.trunc(this.width * 0.015625), (temp * 5) + Math.trunc(this.width * 0.03125), temp, \"#009999\", \"pink\", false, \"(0,0) is being clicked\"),\n                new Square(1, 0, (temp * 3) + Math.trunc(this.width * 0.015625), (temp * 5) + Math.trunc(this.width * 0.03125), temp, \"#009999\", \"pink\", false, \"(1,0) is being clicked\"),\n            ]));\n\n            state.addShape(new ShapeContainer([\n                // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n                new Square(0, 0, (temp * 4) + Math.trunc(this.width * 0.03125), 0, temp, \"#3cba54\", \"pink\", false, \"(0, 0) is being clicked\")\n            ]));\n\n            state.addShape(new ShapeContainer([\n                // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n                new Square(0, 0, (temp * 4) + Math.trunc(this.width * 0.03125), temp + Math.trunc(this.width * 0.015625), temp, \"#3cba54\", \"pink\", false, \"(0, 0) is being clicked\")\n            ]));\n\n            state.addShape(new ShapeContainer([\n                // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n                new Square(0, 0, (temp * 4) + Math.trunc(this.width * 0.03125), (temp * 2) + Math.trunc(this.width * 0.03125), temp, \"#3cba54\", \"pink\", false, \"(0, 0) is being clicked\")\n            ]));\n\n            state.addShape(new ShapeContainer([\n                // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n                new Square(0, 0, (temp * 4) + Math.trunc(this.width * 0.03125), (temp * 4) + Math.trunc(this.width * 0.03125), temp, \"#db3236\", \"pink\", false, \"(0,0) is being clicked\"),\n                new Square(1, 0, (temp * 5) + Math.trunc(this.width * 0.03125), (temp * 4) + Math.trunc(this.width * 0.03125), temp, \"#db3236\", \"pink\", false, \"(0,1) is being clicked\"),\n                new Square(0, 1, (temp * 4) + Math.trunc(this.width * 0.03125), (temp * 5) + Math.trunc(this.width * 0.03125), temp, \"#db3236\", \"pink\", false, \"(1,0) is being clicked\"),\n                new Square(1, 1, (temp * 5) + Math.trunc(this.width * 0.03125), (temp * 5) + Math.trunc(this.width * 0.03125), temp, \"#db3236\", \"pink\", false, \"(1,1) is being clicked\")\n            ]));\n            // state.addShape(new ShapeContainer(singleCellShape)); //checked\n            // state.addShape(new ShapeContainer(squareCellShape)); //checked\n            // state.addShape(new ShapeContainer(smallTCellShape)); // checked\n            // state.addShape(new ShapeContainer(smallLCellShape)); // checked\n            // state.addShape(new ShapeContainer(bigLCellShape)); // checked\n            // state.addShape(new ShapeContainer(doubleCellShape)); // checked\n            // state.addShape(new ShapeContainer(singleCellShapeTwo));\n            // state.addShape(new ShapeContainer(singleCellShapeThree));\n            // state.addShape(new ShapeContainer(singleCellShapeFour));\n            // state.addShape(new ShapeContainer(squareCellShapeTwo));\n        }\n\n        else if (!this.playGame && howToPlay && !backToMainMenu && !controls) {\n            this.context.font = \"bold \" + Math.trunc(this.width * 0.03125) + \"px Arial\";\n            this.context.fillStyle = \"black\";\n            this.context.fillText(\"Rules\", this.width / 2, this.height / 5, 300);\n            this.context.fillText(\"Grab the pieces and place them into the grid.\", this.width / 2, this.height / 3.3, 1500);\n            this.context.fillText(\"Populate the grid to win!\", this.width / 2, this.height / 2.5, 900);\n\n            for (let i = 0; i < buttonKeys.length; i++) {\n                if (this.buttons[buttonKeys[i]].text === \"Back To Main Menu\") {\n                    this.buttons[buttonKeys[i]].drawButton(this.context, this.width);\n                    this.buttons[buttonKeys[i]].active = true;\n                }\n                else {\n                    this.buttons[buttonKeys[i]].active = false;\n                }\n            }\n        }\n\n        else if (!this.playGame && !howToPlay && !backToMainMenu && controls) {\n            this.context.font = \"bold \" + Math.trunc(this.width * 0.03125) + \"px Arial\";\n            this.context.fillStyle = \"black\";\n            this.context.fillText(\"Controls\", this.width / 2, this.height / 5, 300);\n            this.context.fillText(\"Press Q to reset the board\", this.width / 2, this.height / 3.3, 1500);\n            // this.context.fillText(\"To rotate a piece, hold it with the mouse and press R.\", this.width / 2, this.height / 2.5, 1500);\n\n            for (let i = 0; i < buttonKeys.length; i++) {\n                if (this.buttons[buttonKeys[i]].text === \"Back To Main Menu\") {\n                    this.buttons[buttonKeys[i]].drawButton(this.context, this.width);\n                    this.buttons[buttonKeys[i]].active = true;\n                }\n                else {\n                    this.buttons[buttonKeys[i]].active = false;\n                }\n            }\n        }\n\n        // Can try drawing floating pieces here\n        // for (let i = 0; i < 100; i++) {\n        //     this.context.fillRect(0 + this.i, (this.height - 100) - this.i, 100, 100);\n        //     this.i += 3;\n        // }\n    }\n};\n\nCanvasMenu.prototype.clear = function () {\n    this.context.clearRect(0, 0, this.width, this.height);\n};\n\nCanvasMenu.prototype.addButton = function (button) {\n    this.buttons[button.text] = button;\n};\n\nCanvasMenu.prototype.getMouse = function (e) {\n\n    let element = this.canvas;\n    let offsetX = 0;\n    let offsetY = 0;\n    let mouseX, mouseY;\n\n    if (element.offsetParent !== undefined) {\n        do {\n            offsetX += element.offsetLeft;\n            offsetY += element.offsetTop;\n        } while ((element = element.offSetParent));\n    }\n\n    mouseX = e.pageX - offsetX;\n    mouseY = e.pageY - offsetY;\n\n    return { x: mouseX, y: mouseY };\n};","export class Square {\n    constructor(xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, message) {\n        this.originX = xPos;\n        this.originY = yPos;\n        this.xGrid = xGrid;\n        this.yGrid = yGrid;\n        this.xPos = xPos;\n        this.yPos = yPos;\n        this.cellSize = cellSize;\n        this.baseColor = baseColor;\n        this.clickedColor = clickedColor;\n        this.clicked = clicked;\n        // this.state = state; // locus for dragging (point of focus)\n        this.message = message;\n        this.cover = [null, null];\n    }\n}\n\nclass Shape {\n    constructor(...cells) {\n\n    }\n}\n\n// export const shapeGenerator = function() {\n//     const shapeGrid = [[true, false, false],\n//                     [false, false, false],\n//                     [false, false, false]];\n//     for (let i = 0; i < shapeGrid.length; i++) {\n//         for (let j = 0; j < shapeGrid[i].length; j++) {\n\n//         }\n//     }\n// };\n\n// export const singleCellShape = [\n//     // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n//     new Square(0, 0, 0, 0, 108, \"#3cba54\", \"pink\", false, \"(0, 0) is being clicked\")\n// ];\n\n// export const squareCellShape = [\n//     // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n//     new Square(0, 0, 0, 138, 108, \"#db3236\", \"pink\", false, \"(0,0) is being clicked\"),\n//     new Square(1, 0, 108, 138, 108, \"#db3236\", \"pink\", false, \"(1,0) is being clicked\"),\n//     new Square(0, 1, 0, 246, 108, \"#db3236\", \"pink\", false, \"(0,1) is being clicked\"),\n//     new Square(1, 1, 108, 246, 108, \"#db3236\", \"pink\", false, \"(1,1) is being clicked\")\n// ];\n\n// export const smallTCellShape = [\n//     // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n//     new Square(0, 0, 0, 384, 108, \"#4885ed\", \"pink\", false, \"(0,0) is being clicked\"),\n//     new Square(0, 1, 0, 492, 108, \"#4885ed\", \"pink\", false, \"(0,1) is being clicked\"),\n//     new Square(1, 1, 108, 492, 108, \"#4885ed\", \"pink\", false, \"(1,1) is being clicked\"),\n//     new Square(0, 2, 0, 600, 108, \"#4885ed\", \"pink\", false, \"(0,2) is being clicked\")\n// ];\n\n// export const smallLCellShape = [\n//     // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n//     new Square(0, 0, 246, 0, 108, \"#f4c20d\", \"pink\", false, \"(0,0) is being clicked\"),\n//     new Square(0, 1, 246, 108, 108, \"#f4c20d\", \"pink\", false, \"(0,1) is being clicked\"),\n//     new Square(1, 1, 354, 108, 108, \"#f4c20d\", \"pink\", false, \"(1,1) is being clicked\"),\n// ];\n\n// export const bigLCellShape = [\n//     // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n//     new Square(0, 0, 246, 246, 108, \"#551A8B\", \"pink\", false, \"(0,0) is being clicked\"),\n//     new Square(0, 1, 246, 354, 108, \"#551A8B\", \"pink\", false, \"(0,1) is being clicked\"),\n//     new Square(0, 2, 246, 462, 108, \"#551A8B\", \"pink\", false, \"(0,2) is being clicked\"),\n//     new Square(1, 2, 354, 462, 108, \"#551A8B\", \"pink\", false, \"(1,2) is being clicked\")\n// ];\n\n// export const doubleCellShape = [\n//     // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n//     new Square(0, 0, 246, 590, 108, \"#009999\", \"pink\", false, \"(0,0) is being clicked\"),\n//     new Square(1, 0, 354, 590, 108, \"#009999\", \"pink\", false, \"(1,0) is being clicked\"),\n// ];\n\n// export const singleCellShapeTwo = [\n//     // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n//     new Square(0, 0, 482, 0, 108, \"#3cba54\", \"pink\", false, \"(0, 0) is being clicked\")\n// ];\n\n// export const singleCellShapeThree = [\n//     // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n//     new Square(0, 0, 482, 128, 108, \"#3cba54\", \"pink\", false, \"(0, 0) is being clicked\")\n// ];\n\n// export const singleCellShapeFour = [\n//     // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n//     new Square(0, 0, 482, 256, 108, \"#3cba54\", \"pink\", false, \"(0, 0) is being clicked\")\n// ];\n\nexport const squareCellShapeTwo = [\n    // xGrid, yGrid, xPos, yPos, cellSize, baseColor, clickedColor, clicked, state, message\n    new Square(0, 0, 482, 384, 108, \"#db3236\", \"pink\", false, \"(0,0) is being clicked\"),\n    new Square(1, 0, 590, 384, 108, \"#db3236\", \"pink\", false, \"(0,1) is being clicked\"),\n    new Square(0, 1, 482, 492, 108, \"#db3236\", \"pink\", false, \"(1,0) is being clicked\"),\n    new Square(1, 1, 590, 492, 108, \"#db3236\", \"pink\", false, \"(1,1) is being clicked\")\n];","// Possibly to refactor, had a boolean (default false) for each cell and when clicked on, it turns to true\n// and have base coordinates of where each cell is located and have it unique to each of them then based on which one is clicked\n// have them rearrange themselves within the grid and have it work side to side with a 5 by array of booleans to tell the state if each\n// cell inside of the puzzle field\n\nexport default function ShapeContainer(cellArray) { // cellArray is an array that stores cells to draw them\n    this.cellArray = cellArray;\n    this.locus = null;\n}\n\nShapeContainer.prototype.draw = function (context) {\n\n    let length = this.cellArray.length;\n\n    for (let i = 0; i < length; i++) {\n        // debugger;\n        // add conditional for when it is clicked to toggle between colors\n        context.fillStyle = this.cellArray[i].clicked ? this.cellArray[i].clickedColor : this.cellArray[i].baseColor;\n        context.fillRect(this.cellArray[i].xPos, this.cellArray[i].yPos, this.cellArray[i].cellSize, this.cellArray[i].cellSize);\n    }\n};\n\nShapeContainer.prototype.contains = function (mouseX, mouseY) {\n\n    let length = this.cellArray.length;\n\n    for (let i = 0; i < length; i++) {\n        if ((mouseX >= this.cellArray[i].xPos) && (mouseX <= (this.cellArray[i].xPos + this.cellArray[i].cellSize)) &&\n            (mouseY >= this.cellArray[i].yPos) && (mouseY <= (this.cellArray[i].yPos + this.cellArray[i].cellSize))) {\n                // Make this cell true by having it store the state of the cell clicked as well, otherwise it is null\n                // console.log(this.cellArray[i].message);\n                this.locus = [this.cellArray[i].xGrid, this.cellArray[i].yGrid]; // [0, 0]; //\n                // console.log(this.cellArray[i].message);\n                // debugger;\n                this.cellArray[i].clicked = true;\n                return true;\n                // console.log(\"clicking\");\n        }\n    }\n};\n\nShapeContainer.prototype.overlapping = function (mouseX, mouseY, gridXPosition, gridYPosition, gridWidth, gridHeight, gridCellSize, grid) {\n\n    let gridSize = (gridWidth / gridCellSize);\n\n    for (let i = 0; i < gridSize; i++) {\n        for (let j = 0; j < gridSize; j++) {\n\n            let length = this.cellArray.length;\n            let mouseCenterX = Math.trunc((mouseX + Math.abs(mouseX - gridCellSize)) / 2);\n            let mouseCenterY = Math.trunc((mouseY + Math.abs(mouseY - gridCellSize)) / 2);\n            let gridXCellTop = gridXPosition + (gridCellSize * j);\n            let gridYCellTop = gridYPosition + (gridCellSize * i);\n            let gridXCellBottom = gridXPosition + (gridCellSize * (j + 1));\n            let gridYCellBottom = gridYPosition + (gridCellSize * (i + 1));\n\n            if (mouseX >= gridXCellTop && \n                mouseX <= gridXCellBottom &&\n                mouseY >= gridYCellTop && \n                mouseY <= gridYCellBottom) {\n\n            // if (mouseCenterX >= gridXCellTop && \n            //     mouseCenterX <= gridXCellBottom && \n            //     mouseCenterY >= gridYCellTop && \n            //     mouseCenterY <= gridYCellBottom) {\n\n                for (let k = 0; k < length; k++) {\n\n                    if (this.locus[0] > this.cellArray[k].xGrid) { // \n                        if (this.locus[1] > this.cellArray[k].yGrid) {\n                            this.cellArray[k].xPos = (gridXPosition + (gridCellSize * (j - this.locus[0]))) - (this.cellArray[k].xGrid * gridCellSize);\n                            this.cellArray[k].yPos = (gridYPosition + (gridCellSize * Math.abs(i - this.locus[1]))) + (this.cellArray[k].yGrid * gridCellSize);\n\n                            if (this.cellArray[k].cover[0] !== null && this.cellArray[k].cover[1] !== null) {\n                                grid[this.cellArray[k].cover[1]][this.cellArray[k].cover[0]] = false;\n                            }\n\n                            this.cellArray[k].cover = [(j - this.locus[0]) + this.cellArray[k].xGrid, (i - this.locus[1]) + this.cellArray[k].yGrid];\n                            grid[this.cellArray[k].cover[1]][this.cellArray[k].cover[0]] = true;\n                        }\n\n                        else if (this.locus[1] === this.cellArray[k].yGrid) {\n                            this.cellArray[k].xPos = (gridXPosition + (gridCellSize * (j - this.locus[0]))) - (this.cellArray[k].xGrid * gridCellSize);\n                            this.cellArray[k].yPos = gridYPosition + (gridCellSize * i);\n\n                            if (this.cellArray[k].cover[0] !== null && this.cellArray[k].cover[1] !== null) {\n                                grid[this.cellArray[k].cover[1]][this.cellArray[k].cover[0]] = false;\n                            }\n\n                            this.cellArray[k].cover = [(j - this.locus[0]) + this.cellArray[k].xGrid, (i - this.locus[1]) + this.cellArray[k].yGrid];\n                            grid[this.cellArray[k].cover[1]][this.cellArray[k].cover[0]] = true;\n                        }\n\n                        else if (this.locus[1] < this.cellArray[k].yGrid) { // \n                            this.cellArray[k].xPos = (gridXPosition + (gridCellSize * (j - this.locus[0]))) - (this.cellArray[k].xGrid * gridCellSize);\n                            this.cellArray[k].yPos = (gridYPosition + (gridCellSize * (i - this.locus[1]))) + (this.cellArray[k].yGrid * gridCellSize);\n\n                            if (this.cellArray[k].cover[0] !== null && this.cellArray[k].cover[1] !== null) {\n                                grid[this.cellArray[k].cover[1]][this.cellArray[k].cover[0]] = false;\n                            }\n                            \n                            this.cellArray[k].cover = [(j - this.locus[0]) + this.cellArray[k].xGrid, (i - this.locus[1]) + this.cellArray[k].yGrid];\n                            grid[this.cellArray[k].cover[1]][this.cellArray[k].cover[0]] = true;\n                        }\n                    }\n\n                    else if (this.locus[0] === this.cellArray[k].xGrid) { //\n                        if (this.locus[1] > this.cellArray[k].yGrid) {\n                            this.cellArray[k].xPos = gridXPosition + (gridCellSize * j);\n                            this.cellArray[k].yPos = Math.abs((gridYPosition + (gridCellSize * (i - this.locus[1]))) + (this.cellArray[k].yGrid * gridCellSize));\n                            \n                            if (this.cellArray[k].cover[0] !== null && this.cellArray[k].cover[1] !== null) {\n                                grid[this.cellArray[k].cover[1]][this.cellArray[k].cover[0]] = false;\n                            }\n\n                            this.cellArray[k].cover = [(j - this.locus[0]) + this.cellArray[k].xGrid, (i - this.locus[1]) + this.cellArray[k].yGrid];\n                            grid[this.cellArray[k].cover[1]][this.cellArray[k].cover[0]] = true;\n                        }\n\n                        else if (this.locus[1] === this.cellArray[k].yGrid) {\n                            this.cellArray[k].xPos = gridXPosition + (gridCellSize * j);\n                            this.cellArray[k].yPos = gridYPosition + (gridCellSize * i);\n                            \n                            if (this.cellArray[k].cover[0] !== null && this.cellArray[k].cover[1] !== null) {\n                                grid[this.cellArray[k].cover[1]][this.cellArray[k].cover[0]] = false;\n                            }\n\n                            this.cellArray[k].cover = [(j - this.locus[0]) + this.cellArray[k].xGrid, (i - this.locus[1]) + this.cellArray[k].yGrid]; // checked\n                            grid[this.cellArray[k].cover[1]][this.cellArray[k].cover[0]] = true;\n                        }\n\n                        else if (this.locus[1] < this.cellArray[k].yGrid) {\n                            this.cellArray[k].xPos = gridXPosition + (gridCellSize * j);\n                            this.cellArray[k].yPos = (gridYPosition + (gridCellSize * (i - this.locus[1]))) + (this.cellArray[k].yGrid * gridCellSize);\n                            \n                            if (this.cellArray[k].cover[0] !== null && this.cellArray[k].cover[1] !== null) {\n                                grid[this.cellArray[k].cover[1]][this.cellArray[k].cover[0]] = false;\n                            }\n\n                            this.cellArray[k].cover = [(j - this.locus[0]) + this.cellArray[k].xGrid, (i - this.locus[1]) + this.cellArray[k].yGrid];\n                            grid[this.cellArray[k].cover[1]][this.cellArray[k].cover[0]] = true;\n                        }\n                    }\n\n                    else if (this.locus[0] < this.cellArray[k].xGrid) { //\n                        if (this.locus[1] > this.cellArray[k].yGrid) {\n                            this.cellArray[k].xPos = (gridXPosition + (gridCellSize * (j + this.cellArray[k].xGrid)));\n                            this.cellArray[k].yPos = (gridYPosition + (gridCellSize * (i - this.locus[1]))) + (this.cellArray[k].yGrid * gridCellSize);\n                            \n                            if (this.cellArray[k].cover[0] !== null && this.cellArray[k].cover[1] !== null) {\n                                grid[this.cellArray[k].cover[1]][this.cellArray[k].cover[0]] = false;\n                            }\n\n                            this.cellArray[k].cover = [(j - this.locus[0]) + this.cellArray[k].xGrid, (i - this.locus[1]) + this.cellArray[k].yGrid];\n                            grid[this.cellArray[k].cover[1]][this.cellArray[k].cover[0]] = true;\n                        }\n\n                        else if (this.locus[1] === this.cellArray[k].yGrid) { //\n                            this.cellArray[k].xPos = (gridXPosition + (gridCellSize * j)) + (this.cellArray[k].xGrid * gridCellSize);\n                            this.cellArray[k].yPos = gridYPosition + (gridCellSize * (i - this.locus[1])) + (this.cellArray[k].yGrid * gridCellSize);\n                            \n                            if (this.cellArray[k].cover[0] !== null && this.cellArray[k].cover[1] !== null) {\n                                grid[this.cellArray[k].cover[1]][this.cellArray[k].cover[0]] = false;\n                            }\n\n                            this.cellArray[k].cover = [(j - this.locus[0]) + this.cellArray[k].xGrid, (i - this.locus[1]) + this.cellArray[k].yGrid];\n                            grid[this.cellArray[k].cover[1]][this.cellArray[k].cover[0]] = true;\n                        }\n\n                        else if (this.locus[1] < this.cellArray[k].yGrid) {\n                            this.cellArray[k].xPos = (gridXPosition + (gridCellSize * j)) + (this.cellArray[k].xGrid * gridCellSize);\n                            this.cellArray[k].yPos = (gridYPosition + (gridCellSize * (i - this.locus[1]))) + (this.cellArray[k].yGrid * gridCellSize);\n                           \n                            if (this.cellArray[k].cover[0] !== null && this.cellArray[k].cover[1] !== null) {\n                                grid[this.cellArray[k].cover[1]][this.cellArray[k].cover[0]] = false;\n                            }\n                            \n                            this.cellArray[k].cover = [(j - this.locus[0]) + this.cellArray[k].xGrid, (i - this.locus[1]) + this.cellArray[k].yGrid];\n                            grid[this.cellArray[k].cover[1]][this.cellArray[k].cover[0]] = true;\n                        }\n                    }\n                }\n                return true;\n            }\n\n            else {\n                for (let k = 0; k < length; k++) { \n                    this.cellArray[k].xPos = this.cellArray[k].originX;\n                    this.cellArray[k].yPos = this.cellArray[k].originY;\n\n                    // if (this.cellArray[k].cover[0] !== null && this.cellArray[k].cover[1] !== null) {\n                    //     grid[this.cellArray[k].cover[0]][this.cellArray[k].cover[1]] = false;\n                    // }\n                }\n            }\n        }\n    }\n};\n\nShapeContainer.prototype.overlappingOtherShapes = function(shape, cellSize) {\n    let cellArrayLength = this.cellArray.length;\n    let shapeLength = shape.cellArray.length;\n\n    for (let i = 0; i < cellArrayLength; i++) {\n        for (let j = 0; j < shapeLength; j++) {\n\n            if (this.cellArray[i].xPos < (shape.cellArray[j].xPos + Math.trunc(cellSize/2)) && \n                (this.cellArray[i].xPos + Math.trunc(cellSize/2)) > shape.cellArray[j].xPos &&\n                this.cellArray[i].yPos < (shape.cellArray[j].yPos + Math.trunc(cellSize/2)) && \n                (this.cellArray[i].yPos + Math.trunc(cellSize/2)) > shape.cellArray[j].yPos) {\n            // if (this.cellArray[i].xPos < (shape.cellArray[j].xPos + cellSize) &&\n            //     (this.cellArray[i].xPos + cellSize) > shape.cellArray[j].xPos &&\n            //     this.cellArray[i].yPos < (shape.cellArray[j].yPos + cellSize) &&\n            //     (this.cellArray[i].yPos + cellSize) > shape.cellArray[j].yPos) {\n\n                this.cellArray[i].xPos = this.cellArray[i].originX;\n                this.cellArray[i].yPos = this.cellArray[i].originY;\n                return true;\n            }\n        }\n    }\n    // return false;\n};"],"sourceRoot":""}